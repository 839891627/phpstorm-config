<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks>
      <mark key="G" line="0" column="0" filename="$USER_HOME$/Develop/yuewo/database/migrations/2018_05_04_175844_add_merchant_name_index_to_projects.php" protocol="file" />
    </globalmarks>
    <filemarks>
      <file name="$USER_HOME$/Develop/sfy/credit/common/unit/Time.php" timestamp="1556516553795">
        <mark key="[" line="13" column="0" />
        <mark key="]" line="16" column="5" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/fxd_api/controllers/TestController.php" timestamp="1556517488879">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="20" column="36" />
        <mark key="]" line="21" column="37" />
        <mark key="." line="21" column="37" />
        <mark key="^" line="21" column="37" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/xinyongfei-app-api/lib/Controllers/UserController.php" timestamp="1556516357787">
        <mark key="'" line="61" column="27" />
        <mark key="[" line="263" column="0" />
        <mark key="]" line="263" column="0" />
        <mark key="." line="263" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190424.log" timestamp="1556089647093">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" timestamp="1556603953789">
        <mark key="'" line="395" column="29" />
        <mark key="[" line="408" column="0" />
        <mark key="k" line="382" column="82" />
        <mark key="]" line="408" column="0" />
        <mark key="." line="408" column="0" />
        <mark key="^" line="408" column="34" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/logs/fxd_api/http-request.log" timestamp="1556442110935">
        <mark key="'" line="1" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/shoufuyou-php-lib/shoufuyou/Util/JWT.php" timestamp="1556516749601">
        <mark key="'" line="70" column="8" />
        <mark key="[" line="1" column="3" />
        <mark key="]" line="2" column="37" />
        <mark key="^" line="2" column="37" />
        <mark key="." line="2" column="37" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/loanmarket/vendor/yiisoft/yii2/web/Application.php" timestamp="1555671047005">
        <mark key="'" line="102" column="29" />
        <mark key="[" line="79" column="0" />
        <mark key="]" line="79" column="0" />
        <mark key="." line="79" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task.log" timestamp="1555926260354">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/shoufuyou-php-lib/shoufuyou/Util/Time.php" timestamp="1556516565537">
        <mark key="e" line="4" column="6" />
        <mark key="'" line="195" column="0" />
        <mark key="[" line="6" column="0" />
        <mark key="]" line="9" column="5" />
        <mark key="." line="6" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/vendor/yiisoft/yii2/web/Request.php" timestamp="1556070844443">
        <mark key="'" line="1139" column="22" />
        <mark key="[" line="274" column="0" />
        <mark key="]" line="274" column="0" />
        <mark key="." line="274" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/db.log" timestamp="1556603680484">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/common/config/main.php" timestamp="1556603812991">
        <mark key="'" line="71" column="16" />
        <mark key="[" line="56" column="20" />
        <mark key="]" line="56" column="47" />
        <mark key="." line="56" column="47" />
        <mark key="^" line="56" column="47" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/common/services/sms/ChuangRongYun.php" timestamp="1556525018027">
        <mark key="'" line="31" column="24" />
        <mark key="[" line="23" column="61" />
        <mark key="]" line="24" column="40" />
        <mark key="^" line="24" column="40" />
        <mark key="." line="24" column="40" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/fxd_api/services/baseApi.php" timestamp="1556442404141">
        <mark key="'" line="22" column="6" />
        <mark key="[" line="19" column="0" />
        <mark key="]" line="19" column="0" />
        <mark key="." line="19" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190429.log" timestamp="1556531764383">
        <mark key="'" line="13" column="31" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/common/unit/JWT.php" timestamp="1556516666559">
        <mark key="'" line="72" column="21" />
        <mark key="[" line="71" column="0" />
        <mark key="]" line="71" column="51" />
        <mark key="." line="18" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" timestamp="1556594508944">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/shoufuyou-php-lib/shoufuyou/Util/PaymentGateErrorHandler.php" timestamp="1556516482759">
        <mark key="'" line="10" column="26" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="25" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/shoufuyou-notify/lib/Router.php" timestamp="1556510376338">
        <mark key="[" line="85" column="27" />
        <mark key="]" line="85" column="31" />
        <mark key="." line="85" column="31" />
        <mark key="^" line="85" column="31" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/api/controllers/XyfSmsTaskController.php" timestamp="1556604750534">
        <mark key="'" line="298" column="0" />
        <mark key="[" line="382" column="0" />
        <mark key="]" line="382" column="0" />
        <mark key="." line="382" column="0" />
        <mark key="^" line="519" column="33" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/xinyongfei-app-api/lib/Controllers/AppController.php" timestamp="1556446697028">
        <mark key="'" line="10" column="40" />
        <mark key="[" line="39" column="0" />
        <mark key="]" line="39" column="0" />
        <mark key="." line="39" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/common/unit/ErrorHandler.php" timestamp="1555930069885">
        <mark key="'" line="26" column="50" />
        <mark key="[" line="23" column="0" />
        <mark key="]" line="23" column="0" />
        <mark key="." line="23" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/test.php" timestamp="1556539663641">
        <mark key="'" line="13" column="0" />
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="16" />
        <mark key="." line="26" column="24" />
        <mark key="^" line="31" column="39" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/vendor/yiisoft/yii2/web/Application.php" timestamp="1555899123689">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="102" column="0" />
        <mark key="]" line="102" column="0" />
        <mark key="." line="102" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/common/config/bootstrap.php" timestamp="1556172394579">
        <mark key="'" line="5" column="18" />
        <mark key="[" line="10" column="0" />
        <mark key="]" line="10" column="0" />
        <mark key="." line="10" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/shoufuyou-notify/lib/Controllers/ShengbeiController.php" timestamp="1556527895827">
        <mark key="'" line="92" column="0" />
        <mark key="[" line="113" column="0" />
        <mark key="]" line="113" column="0" />
        <mark key="." line="113" column="0" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/syf-middleware-system/yii" timestamp="1556603699122">
        <mark key="[" line="7" column="12" />
        <mark key="]" line="7" column="13" />
        <mark key="." line="7" column="13" />
      </file>
      <file name="$USER_HOME$/Develop/sfy/credit/fxd_api/services/fxdApi.php" timestamp="1556441968388">
        <mark key="'" line="66" column="30" />
        <mark key="[" line="62" column="0" />
        <mark key="]" line="62" column="0" />
        <mark key="." line="62" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="11" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/test.php" />
      <jump line="5" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/test.php" />
      <jump line="33" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/test.php" />
      <jump line="32" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/test.php" />
      <jump line="28" column="39" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/test.php" />
      <jump line="10" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/test.php" />
      <jump line="379" column="16" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="338" column="9" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="324" column="70" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="345" column="84" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="116" column="17" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="336" column="12" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="347" column="35" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="348" column="36" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="359" column="44" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="351" column="48" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="350" column="34" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="337" column="31" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="346" column="82" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="364" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="362" column="16" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="354" column="59" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="369" column="17" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="344" column="31" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="361" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="381" column="27" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="376" column="24" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="87" column="24" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="358" column="20" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="363" column="28" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="88" column="31" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="68" column="4" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="366" column="28" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="498" column="8" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="339" column="19" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="282" column="4" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="1" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="2" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="349" column="23" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="325" column="31" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="356" column="53" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="3" column="57" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="5" column="64" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="7" column="62" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="8" column="57" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="10" column="64" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="12" column="62" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="13" column="57" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="4" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="332" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="38" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="0" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="375" column="28" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="11" column="50" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="329" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="647" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="662" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="321" column="47" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="52" column="21" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="60" column="22" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="0" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="48" column="9" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="1" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="331" column="34" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="334" column="24" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="342" column="66" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="357" column="12" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="374" column="26" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="367" column="23" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="340" column="56" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="6" column="43" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/sms-task-20190430.log" />
      <jump line="360" column="12" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="372" column="12" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="341" column="12" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="386" column="9" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="388" column="35" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="413" column="8" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="435" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="441" column="49" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="420" column="20" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="387" column="9" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="404" column="8" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="391" column="18" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="33" column="4" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="58" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="402" column="46" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="410" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="392" column="22" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="370" column="8" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="407" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="399" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="13" column="51" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/db.log" />
      <jump line="1597" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/db.log" />
      <jump line="0" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/logs/console/db.log" />
      <jump line="395" column="29" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/console/controllers/XyfSmsTaskController.php" />
      <jump line="333" column="22" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/api/controllers/XyfSmsTaskController.php" />
      <jump line="530" column="20" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/api/controllers/XyfSmsTaskController.php" />
      <jump line="97" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/api/controllers/XyfSmsTaskController.php" />
      <jump line="155" column="70" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/api/controllers/XyfSmsTaskController.php" />
      <jump line="298" column="0" filename="$USER_HOME$/Develop/sfy/syf-middleware-system/api/controllers/XyfSmsTaskController.php" />
    </jumps>
    <registers>
      <register name="a" type="4">
        <keys>
          <key char="73" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="40" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="41" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="41" code="0" mods="0" />
          <key char="59" code="0" mods="0" />
          <key char="65535" code="127" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="94" code="0" mods="0" />
        </keys>
      </register>
      <register name="&quot;" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="j" type="4">
        <keys>
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="65535" code="81" mods="130" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="65535" code="81" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
        </keys>
      </register>
      <register name="k" type="4">
        <text>j,</text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name="/" type="4">
        <text>dist</text>
      </register>
      <register name="0" type="4">
        <text>recentNotLoginUsers</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICAgICAgLy8gLT5kaXN0aW5jdCgndXNlcl9pZCcpCg==</text>
      </register>
      <register name="r" type="4">
        <text>'</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIGRkKCRleGlzdCk7Cg==</text>
      </register>
      <register name="s" type="4">
        <text>&quot;</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICBkZCgkZXhpc3QpOwo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAK</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICBkZCgkcXVlcnkpOwo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAnY2F0ZWdvcmllcycgPT4gWyd5aWlcZGJcKiddLAo=</text>
      </register>
      <register name="w" type="4">
        <keys>
          <key char="65" code="0" mods="0" />
          <key char="63" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
        </keys>
      </register>
      <register name="8" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICAgICAgLT5jcmVhdGVDb21tYW5kKCktPmRkZGQK</text>
      </register>
      <register name=":" type="4">
        <text>nohls</text>
      </register>
    </registers>
    <search>
      <last-search>dist</last-search>
      <last-offset />
      <last-pattern>dist</last-pattern>
      <last-replace encoding="base64">PT4=</last-replace>
      <last-substitute>:</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxlbmNyeXB0XD4=</entry>
        <entry>shen</entry>
        <entry encoding="base64">XDxwYXJhbXNcPg==</entry>
        <entry encoding="base64">XDxkZWNyeXB0XD4=</entry>
        <entry encoding="base64">XDxjaGVja1NpZ25cPg==</entry>
        <entry>time</entry>
        <entry>json</entry>
        <entry>where</entry>
        <entry encoding="base64">XDxjbGlfc2V0X3Byb2Nlc3NfdGl0bGVcPg==</entry>
        <entry encoding="base64">XDxjaGlsZF9waWRcPg==</entry>
        <entry encoding="base64">XDxiaWxsc1w+</entry>
        <entry encoding="base64">XDxiaWxsXD4=</entry>
        <entry encoding="base64">XDxiYXRjaFw+</entry>
        <entry encoding="base64">XDxwZXJpb2RfbnVtYmVyXD4=</entry>
        <entry encoding="base64">XDzov5jmrL7lkI7mnKrlgJ/nlKjmiLflpITnkIZcPg==</entry>
        <entry>order_number</entry>
        <entry encoding="base64">XDx3aGVyZVw+</entry>
        <entry encoding="base64">XDxoYXNOb0lkQ2FyZFVzZXJzXD4=</entry>
        <entry>UserAc</entry>
        <entry>dist</entry>
      </history-search>
      <history-cmd>
        <entry encoding="base64">JzwsJz5tIC4tMg==</entry>
        <entry>%s/private/protected/g</entry>
        <entry>action Forward</entry>
        <entry encoding="base64">JzwsJz5zL2AvL2c=</entry>
        <entry>w</entry>
        <entry>%s/microtime()/microtime(true)/g</entry>
        <entry>action CloseAllEditors</entry>
        <entry encoding="base64">JzwsJz5zLzovPT4vZw==</entry>
        <entry>m .-2</entry>
        <entry>action FindUsages</entry>
        <entry>m .+1</entry>
        <entry>action Back</entry>
        <entry>action NextSplitter</entry>
        <entry>.nohls</entry>
        <entry>vs</entry>
        <entry>action PreviousTab</entry>
        <entry>wq</entry>
        <entry>action NextTab</entry>
        <entry>action SelectInProjectView</entry>
        <entry>nohls</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
    </shortcut-conflicts>
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
</application>